// <auto-generated />
using ListaDeContatos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ListaDeContatos.Migrations
{
    // Classe parcial gerada automaticamente para representar o estado atual do modelo
    [DbContext(typeof(BancoContext))]
    partial class BancoContextModelSnapshot : ModelSnapshot
    {
        // Método que constrói o modelo do banco de dados
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            // Configurações gerais do modelo
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6") // Versão do EF Core
                .HasAnnotation("Relational:MaxIdentifierLength", 128); // Comprimento máximo do identificador no banco de dados relacional

            // Configurações específicas para SQL Server
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // Configuração da entidade 'ContatoModel'
            modelBuilder.Entity("ListaDeContatos.Models.ContatoModel", b =>
            {
                // Configuração da propriedade 'Id'
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd() // Indica que o valor é gerado automaticamente ao adicionar
                    .HasColumnType("int");

                // Configuração específica para SQL Server
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                // Configuração da propriedade 'Email'
                b.Property<string>("Email")
                    .IsRequired() // Indica que a propriedade é obrigatória
                    .HasColumnType("nvarchar(max)"); // Tipo de dado no banco

                // Configuração da propriedade 'Endereco'
                b.Property<string>("Endereco")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Configuração da propriedade 'Nome'
                b.Property<string>("Nome")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Configuração da propriedade 'Telefone'
                b.Property<string>("Telefone")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Definindo 'Id' como chave primária
                b.HasKey("Id");

                // Mapeando a entidade para a tabela 'Contatos'
                b.ToTable("Contatos");
            });
#pragma warning restore 612, 618
        }
    }
}

